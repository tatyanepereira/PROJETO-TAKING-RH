package br.com.taking.ProjetoGestaoRH.repository;


import java.util.Date;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import br.com.taking.ProjetoGestaoRH.model.Candidato;

public interface CandidatoRepository extends JpaRepository<Candidato, Integer>{
	
	
	// FILTRO DE CANDIDATO POR DOCUMENTO DE IDENTIFICAÇÃO
	@Query("select c from Candidato c where c.identificationDocument = :identificationDocument")
	List<Candidato> findAll(String identificationDocument);
	
	// FILTRO DE CANDIDATO POR GÊNERO
	@Query("select c from Candidato c where c.gender_id.gender_id = :gender")
	List<Candidato> findByGender(int gender);
	
	// FILTRO DE CANDIDATO POR AREA DE INTERESSE
	@Query("select c from Candidato c join c.areaInterest_id a where a.areaInterest_id = :areaInterest")
	List<Candidato> findByAreaInterest(int areaInterest);
	
	// FILTRO DE CANDIDATO POR INTERVALO DE IDADE
	@Query("select c from Candidato c where DATE_FORMAT(CURDATE(), '%Y') - DATE_FORMAT(c.birthdate, '%Y') >= :age1 " +
	            "and DATE_FORMAT(CURDATE(), '%Y') - DATE_FORMAT(c.birthdate, '%Y') <= :age2 " +
	            "and DATE_FORMAT(CURDATE(), '%Y') - DATE_FORMAT(c.birthdate, '%Y') <= 35 " +
	            "and DATE_FORMAT(CURDATE(), '%Y') - DATE_FORMAT(c.birthdate, '%Y') >= 18")
	List<Candidato> filterAges(int age1, int age2);
	

	//FILTRO CANDIDATO
	@Query("SELECT c FROM Candidato c "

			+ "LEFT JOIN c.areaInterest ai "

			+ "LEFT JOIN c.workExperience_id we "

			+ "LEFT JOIN we.role rl "

			+ "LEFT JOIN c.academicQualification_id aq "

			+ "LEFT JOIN aq.status aqSt "

			+ "LEFT JOIN aq.course co "

			+ "WHERE "

			+ "(c.identificationDocument = :identificationDocument OR :identificationDocument is null) " //documento

			+ "AND (c.gender.gender = :gender_Id OR :gender_Id = 0) " //genero

			+ "AND (we.activitiesPerformed like '%:activitiesPerformed%' OR :activitiesPerformed is null) " //activities performed

			+ "AND (ai.areaName like '%:areaInterest%' OR :areaInterest is null) " // areas de interesse

			+ "AND (co.courseName like '%:courseName%' OR :courseName is null) " // curso (da qualificacao academica)

			+ "AND (rl.roleName like '%:roleName%' OR :roleName is null) " // papel (da experiencia profissional)

			+ "AND (aqSt.status = :academicQualificationStatusId OR :academicQualificationStatusId = 0) ") // status da formacao academica
	
	List<Candidato> filter(
			
			@Param("identificationDocument")String identificationDocument,
			@Param("gender")int gender_Id,
			@Param("area_interest")String area_interest,
			@Param("activitiesPerformed")String activitiesPerformed,
			@Param("coursename")String coursename,
			@Param("roleName")String roleName,
			@Param("academicQualification_id") int academicQualification_id);
			
	
	
	
}